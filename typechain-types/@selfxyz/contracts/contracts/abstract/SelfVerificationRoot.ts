/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IVcAndDiscloseCircuitVerifier {
  export type VcAndDiscloseProofStruct = {
    a: [BigNumberish, BigNumberish];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    c: [BigNumberish, BigNumberish];
    pubSignals: BigNumberish[];
  };

  export type VcAndDiscloseProofStructOutput = [
    a: [bigint, bigint],
    b: [[bigint, bigint], [bigint, bigint]],
    c: [bigint, bigint],
    pubSignals: bigint[]
  ] & {
    a: [bigint, bigint];
    b: [[bigint, bigint], [bigint, bigint]];
    c: [bigint, bigint];
    pubSignals: bigint[];
  };
}

export interface SelfVerificationRootInterface extends Interface {
  getFunction(nameOrSignature: "verifySelfProof"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "verifySelfProof",
    values: [IVcAndDiscloseCircuitVerifier.VcAndDiscloseProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifySelfProof",
    data: BytesLike
  ): Result;
}

export interface SelfVerificationRoot extends BaseContract {
  connect(runner?: ContractRunner | null): SelfVerificationRoot;
  waitForDeployment(): Promise<this>;

  interface: SelfVerificationRootInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  verifySelfProof: TypedContractMethod<
    [proof: IVcAndDiscloseCircuitVerifier.VcAndDiscloseProofStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "verifySelfProof"
  ): TypedContractMethod<
    [proof: IVcAndDiscloseCircuitVerifier.VcAndDiscloseProofStruct],
    [void],
    "nonpayable"
  >;

  filters: {};
}
