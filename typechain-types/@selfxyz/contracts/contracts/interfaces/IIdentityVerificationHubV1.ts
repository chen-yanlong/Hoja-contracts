/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IIdentityVerificationHubV1 {
  export type ReadableRevealedDataStruct = {
    issuingState: string;
    name: string[];
    passportNumber: string;
    nationality: string;
    dateOfBirth: string;
    gender: string;
    expiryDate: string;
    olderThan: BigNumberish;
    passportNoOfac: BigNumberish;
    nameAndDobOfac: BigNumberish;
    nameAndYobOfac: BigNumberish;
  };

  export type ReadableRevealedDataStructOutput = [
    issuingState: string,
    name: string[],
    passportNumber: string,
    nationality: string,
    dateOfBirth: string,
    gender: string,
    expiryDate: string,
    olderThan: bigint,
    passportNoOfac: bigint,
    nameAndDobOfac: bigint,
    nameAndYobOfac: bigint
  ] & {
    issuingState: string;
    name: string[];
    passportNumber: string;
    nationality: string;
    dateOfBirth: string;
    gender: string;
    expiryDate: string;
    olderThan: bigint;
    passportNoOfac: bigint;
    nameAndDobOfac: bigint;
    nameAndYobOfac: bigint;
  };

  export type VcAndDiscloseHubProofStruct = {
    olderThanEnabled: boolean;
    olderThan: BigNumberish;
    forbiddenCountriesEnabled: boolean;
    forbiddenCountriesListPacked: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ];
    ofacEnabled: [boolean, boolean, boolean];
    vcAndDiscloseProof: IVcAndDiscloseCircuitVerifier.VcAndDiscloseProofStruct;
  };

  export type VcAndDiscloseHubProofStructOutput = [
    olderThanEnabled: boolean,
    olderThan: bigint,
    forbiddenCountriesEnabled: boolean,
    forbiddenCountriesListPacked: [bigint, bigint, bigint, bigint],
    ofacEnabled: [boolean, boolean, boolean],
    vcAndDiscloseProof: IVcAndDiscloseCircuitVerifier.VcAndDiscloseProofStructOutput
  ] & {
    olderThanEnabled: boolean;
    olderThan: bigint;
    forbiddenCountriesEnabled: boolean;
    forbiddenCountriesListPacked: [bigint, bigint, bigint, bigint];
    ofacEnabled: [boolean, boolean, boolean];
    vcAndDiscloseProof: IVcAndDiscloseCircuitVerifier.VcAndDiscloseProofStructOutput;
  };

  export type VcAndDiscloseVerificationResultStruct = {
    attestationId: BigNumberish;
    scope: BigNumberish;
    userIdentifier: BigNumberish;
    nullifier: BigNumberish;
    identityCommitmentRoot: BigNumberish;
    revealedDataPacked: [BigNumberish, BigNumberish, BigNumberish];
    forbiddenCountriesListPacked: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ];
  };

  export type VcAndDiscloseVerificationResultStructOutput = [
    attestationId: bigint,
    scope: bigint,
    userIdentifier: bigint,
    nullifier: bigint,
    identityCommitmentRoot: bigint,
    revealedDataPacked: [bigint, bigint, bigint],
    forbiddenCountriesListPacked: [bigint, bigint, bigint, bigint]
  ] & {
    attestationId: bigint;
    scope: bigint;
    userIdentifier: bigint;
    nullifier: bigint;
    identityCommitmentRoot: bigint;
    revealedDataPacked: [bigint, bigint, bigint];
    forbiddenCountriesListPacked: [bigint, bigint, bigint, bigint];
  };
}

export declare namespace IDscCircuitVerifier {
  export type DscCircuitProofStruct = {
    a: [BigNumberish, BigNumberish];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    c: [BigNumberish, BigNumberish];
    pubSignals: [BigNumberish, BigNumberish];
  };

  export type DscCircuitProofStructOutput = [
    a: [bigint, bigint],
    b: [[bigint, bigint], [bigint, bigint]],
    c: [bigint, bigint],
    pubSignals: [bigint, bigint]
  ] & {
    a: [bigint, bigint];
    b: [[bigint, bigint], [bigint, bigint]];
    c: [bigint, bigint];
    pubSignals: [bigint, bigint];
  };
}

export declare namespace IRegisterCircuitVerifier {
  export type RegisterCircuitProofStruct = {
    a: [BigNumberish, BigNumberish];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    c: [BigNumberish, BigNumberish];
    pubSignals: [BigNumberish, BigNumberish, BigNumberish];
  };

  export type RegisterCircuitProofStructOutput = [
    a: [bigint, bigint],
    b: [[bigint, bigint], [bigint, bigint]],
    c: [bigint, bigint],
    pubSignals: [bigint, bigint, bigint]
  ] & {
    a: [bigint, bigint];
    b: [[bigint, bigint], [bigint, bigint]];
    c: [bigint, bigint];
    pubSignals: [bigint, bigint, bigint];
  };
}

export declare namespace IVcAndDiscloseCircuitVerifier {
  export type VcAndDiscloseProofStruct = {
    a: [BigNumberish, BigNumberish];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    c: [BigNumberish, BigNumberish];
    pubSignals: BigNumberish[];
  };

  export type VcAndDiscloseProofStructOutput = [
    a: [bigint, bigint],
    b: [[bigint, bigint], [bigint, bigint]],
    c: [bigint, bigint],
    pubSignals: bigint[]
  ] & {
    a: [bigint, bigint];
    b: [[bigint, bigint], [bigint, bigint]];
    c: [bigint, bigint];
    pubSignals: bigint[];
  };
}

export interface IIdentityVerificationHubV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "getReadableForbiddenCountries"
      | "getReadableRevealedData"
      | "registerDscKeyCommitment"
      | "registerPassportCommitment"
      | "registry"
      | "sigTypeToDscCircuitVerifiers"
      | "sigTypeToRegisterCircuitVerifiers"
      | "vcAndDiscloseCircuitVerifier"
      | "verifyVcAndDisclose"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getReadableForbiddenCountries",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "getReadableRevealedData",
    values: [[BigNumberish, BigNumberish, BigNumberish], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDscKeyCommitment",
    values: [BigNumberish, IDscCircuitVerifier.DscCircuitProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPassportCommitment",
    values: [BigNumberish, IRegisterCircuitVerifier.RegisterCircuitProofStruct]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sigTypeToDscCircuitVerifiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sigTypeToRegisterCircuitVerifiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vcAndDiscloseCircuitVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyVcAndDisclose",
    values: [IIdentityVerificationHubV1.VcAndDiscloseHubProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getReadableForbiddenCountries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReadableRevealedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDscKeyCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPassportCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sigTypeToDscCircuitVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sigTypeToRegisterCircuitVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vcAndDiscloseCircuitVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyVcAndDisclose",
    data: BytesLike
  ): Result;
}

export interface IIdentityVerificationHubV1 extends BaseContract {
  connect(runner?: ContractRunner | null): IIdentityVerificationHubV1;
  waitForDeployment(): Promise<this>;

  interface: IIdentityVerificationHubV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getReadableForbiddenCountries: TypedContractMethod<
    [
      forbiddenCountriesListPacked: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [string[]],
    "view"
  >;

  getReadableRevealedData: TypedContractMethod<
    [
      revealedDataPacked: [BigNumberish, BigNumberish, BigNumberish],
      types: BigNumberish[]
    ],
    [IIdentityVerificationHubV1.ReadableRevealedDataStructOutput],
    "view"
  >;

  registerDscKeyCommitment: TypedContractMethod<
    [
      dscCircuitVerifierId: BigNumberish,
      dscCircuitProof: IDscCircuitVerifier.DscCircuitProofStruct
    ],
    [void],
    "nonpayable"
  >;

  registerPassportCommitment: TypedContractMethod<
    [
      registerCircuitVerifierId: BigNumberish,
      registerCircuitProof: IRegisterCircuitVerifier.RegisterCircuitProofStruct
    ],
    [void],
    "nonpayable"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  sigTypeToDscCircuitVerifiers: TypedContractMethod<
    [typeId: BigNumberish],
    [string],
    "view"
  >;

  sigTypeToRegisterCircuitVerifiers: TypedContractMethod<
    [typeId: BigNumberish],
    [string],
    "view"
  >;

  vcAndDiscloseCircuitVerifier: TypedContractMethod<[], [string], "view">;

  verifyVcAndDisclose: TypedContractMethod<
    [proof: IIdentityVerificationHubV1.VcAndDiscloseHubProofStruct],
    [IIdentityVerificationHubV1.VcAndDiscloseVerificationResultStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getReadableForbiddenCountries"
  ): TypedContractMethod<
    [
      forbiddenCountriesListPacked: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReadableRevealedData"
  ): TypedContractMethod<
    [
      revealedDataPacked: [BigNumberish, BigNumberish, BigNumberish],
      types: BigNumberish[]
    ],
    [IIdentityVerificationHubV1.ReadableRevealedDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerDscKeyCommitment"
  ): TypedContractMethod<
    [
      dscCircuitVerifierId: BigNumberish,
      dscCircuitProof: IDscCircuitVerifier.DscCircuitProofStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerPassportCommitment"
  ): TypedContractMethod<
    [
      registerCircuitVerifierId: BigNumberish,
      registerCircuitProof: IRegisterCircuitVerifier.RegisterCircuitProofStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sigTypeToDscCircuitVerifiers"
  ): TypedContractMethod<[typeId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "sigTypeToRegisterCircuitVerifiers"
  ): TypedContractMethod<[typeId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "vcAndDiscloseCircuitVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyVcAndDisclose"
  ): TypedContractMethod<
    [proof: IIdentityVerificationHubV1.VcAndDiscloseHubProofStruct],
    [IIdentityVerificationHubV1.VcAndDiscloseVerificationResultStructOutput],
    "view"
  >;

  filters: {};
}
