/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  SelfVerificationRoot,
  SelfVerificationRootInterface,
} from "../../../../../@selfxyz/contracts/contracts/abstract/SelfVerificationRoot";

const _abi = [
  {
    inputs: [],
    name: "InvalidAttestationId",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidScope",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256[2]",
            name: "a",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2][2]",
            name: "b",
            type: "uint256[2][2]",
          },
          {
            internalType: "uint256[2]",
            name: "c",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[21]",
            name: "pubSignals",
            type: "uint256[21]",
          },
        ],
        internalType: "struct IVcAndDiscloseCircuitVerifier.VcAndDiscloseProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "verifySelfProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class SelfVerificationRoot__factory {
  static readonly abi = _abi;
  static createInterface(): SelfVerificationRootInterface {
    return new Interface(_abi) as SelfVerificationRootInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SelfVerificationRoot {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SelfVerificationRoot;
  }
}
